/*
angle     measured[A]            cos(theta)[B]         A/B

0 choices: 1 1 1
1 choices: 0.9958861775565901 0.9998476951563913 0.996037878949972
2 choices: 0.9914896191503736 0.9993908270190958 0.9920939759950677
3 choices: 0.9866499072487861 0.9986295347545738 0.9880039323003481
4 choices: 0.9821678961165641 0.9975640502598242 0.98456625001748
5 choices: 0.977633109528377 0.9961946980917455 0.9813675091837729
6 choices: 0.9730886599627255 0.9945218953682733 0.9784487043418878
7 choices: 0.9672980294038585 0.992546151641322 0.9745622687713694
8 choices: 0.9634377230826531 0.9902680687415704 0.9729059771734201
9 choices: 0.959794296400187 0.9876883405951378 0.9717582530354231
10 choices: 0.9536169190098533 0.984807753012208 0.9683279971070983
11 choices: 0.947442732809306 0.981627183447664 0.9651757294268323
12 choices: 0.9440650817737313 0.9781476007338057 0.9651560572918589
13 choices: 0.9379965164195591 0.9743700647852352 0.962669677897285
14 choices: 0.9335062661457333 0.9702957262759965 0.9620842809733261
15 choices: 0.9284472955866893 0.9659258262890683 0.961199369887059
16 choices: 0.9216652323580035 0.9612616959383189 0.9588078212752834
17 choices: 0.9165516266834788 0.9563047559630355 0.9584304804177997
18 choices: 0.910001624519413 0.9510565162951535 0.9568323321776185
19 choices: 0.9056747963929344 0.9455185755993168 0.9578603950946945
20 choices: 0.8986084812189 0.9396926207859084 0.9562791718714915
21 choices: 0.8942313030925546 0.9335804264972017 0.9578513834611065
22 choices: 0.8851359658436811 0.9271838545667874 0.9546498911558889
23 choices: 0.8800026988428711 0.9205048534524404 0.9560000640326206
24 choices: 0.8744682766536878 0.9135454576426009 0.9572247000277889
25 choices: 0.8684879216687182 0.9063077870366499 0.9582703956548899
26 choices: 0.8595109348027391 0.898794046299167 0.9562935339211711
27 choices: 0.853141454759134 0.8910065241883679 0.9575030390897241
28 choices: 0.8470375614416779 0.882947592858927 0.9593293738975212
29 choices: 0.838768115942029 0.8746197071393957 0.9590089373647595
30 choices: 0.8337721342031686 0.8660254037844387 0.9627571322500164
31 choices: 0.8240442679574238 0.8571673007021123 0.9613575637829894
32 choices: 0.8158729781443494 0.848048096156426 0.9620597957145326
33 choices: 0.8075105042016807 0.838670567945424 0.9628458837895322
34 choices: 0.8001277293102618 0.8290375725550417 0.965128428189712
35 choices: 0.7879736848493676 0.8191520442889918 0.9619382510768358
36 choices: 0.7786973423632674 0.8090169943749475 0.9625228490594252
37 choices: 0.7682083209803341 0.7986355100472928 0.9619010315917997
38 choices: 0.7563867817595257 0.7880107536067219 0.9598686036929656
39 choices: 0.7500687070580887 0.7771459614569708 0.9651580838841156
40 choices: 0.7354210018778866 0.766044443118978 0.9600239365794405
41 choices: 0.7199563374855529 0.754709580222772 0.9539515018121795
42 choices: 0.7111782009599009 0.7431448254773942 0.9569846637942233
43 choices: 0.6969115246490369 0.7313537016191705 0.9529062656087188
44 choices: 0.6819200548436428 0.7193398003386512 0.947980432227729
45 choices: 0.6681005691078633 0.7071067811865476 0.9448368858615235
46 choices: 0.6507613529173966 0.6946583704589974 0.9368077613279233
47 choices: 0.6342615342615343 0.6819983600624985 0.9300044859395417
48 choices: 0.6263795091418218 0.6691306063588582 0.9361094877281569
49 choices: 0.6045416012340703 0.6560590289905074 0.921474401723107
50 choices: 0.5905390013077778 0.6427876096865394 0.9187155950248621
51 choices: 0.5750292414343994 0.6293203910498375 0.9137305093120069
52 choices: 0.5546054344995226 0.6156614753256583 0.900828550635169
53 choices: 0.5483852196683154 0.6018150231520483 0.9112188937991437
54 choices: 0.5316548449498798 0.5877852522924731 0.9045052472417874
55 choices: 0.516309412861137 0.573576436351046 0.9001579914017599
56 choices: 0.5073965159499036 0.5591929034707468 0.9073729526977934
57 choices: 0.4902760922330097 0.5446390350150272 0.9001853718022295
58 choices: 0.477655331973576 0.5299192642332049 0.901373783164394
59 choices: 0.46867064402631176 0.5150380749100544 0.9099728095018215
60 choices: 0.44777000777000775 0.5000000000000001 0.8955400155400153
61 choices: 0.4284209533392026 0.4848096202463371 0.8836890512228639
62 choices: 0.41932007290593554 0.46947156278589086 0.8931745948948401
63 choices: 0.4055016853304366 0.45399049973954686 0.8931942090485855
64 choices: 0.3948350164018781 0.43837114678907746 0.9006865969485287
65 choices: 0.38555169908790055 0.42261826174069944 0.912293040768926
66 choices: 0.3594355739536106 0.4067366430758004 0.8837059066906479
67 choices: 0.34420457550912453 0.3907311284892737 0.8809243759000215
68 choices: 0.33706910907577015 0.3746065934159122 0.8997949181891053
69 choices: 0.32579993657258266 0.35836794954530016 0.9091213011262864
70 choices: 0.30305291723202166 0.3420201433256688 0.8860674528852446
71 choices: 0.2956028417125236 0.32556815445715676 0.9079599391574509
72 choices: 0.2807219596046412 0.30901699437494745 0.9084353440575688
73 choices: 0.26682950490247026 0.29237170472273677 0.9126379214962378
74 choices: 0.2553938088454991 0.27563735581699916 0.9265573169083071
75 choices: 0.23226319978774213 0.25881904510252074 0.8973960926860711
76 choices: 0.22234432883705268 0.24192189559966767 0.9190748455649838
77 choices: 0.21006851034829088 0.22495105434386514 0.9338409680319859
78 choices: 0.17940199335548168 0.20791169081775923 0.862875928957419
79 choices: 0.17065127782357792 0.19080899537654492 0.8943565657730784
80 choices: 0.15914743105576334 0.17364817766693041 0.916493528432066
81 choices: 0.14915103762068582 0.15643446504023092 0.95344103092837
82 choices: 0.1321135552357635 0.13917310096006547 0.9492750705732451
83 choices: 0.1264120595496372 0.12186934340514749 1.0372752984266742
84 choices: 0.09784679878048785 0.10452846326765346 0.9360780377105835
85 choices: 0.08732863598069995 0.08715574274765836 1.001983727378036
86 choices: 0.06313996477169348 0.06975647374412523 0.9051484598160471
87 choices: 0.04456998149410729 0.052335956242943966 0.8516130150983207
88 choices: 0.029662515224138652 0.03489949670250108 0.8499410600959435
89 choices: 0.022314066008305655 0.0174524064372836 1.2785667173459865
90 choices: 0.008053529930282854 6.123233995736766e-17 131524124929572.11

choices: [ 100054, 0, 0, 99946 ] [ 0.50027, 0, 0, 0.49973 ] 1 [ 0, 0, 0, 0 ]
choices: [ 89623, 10145, 10288, 89944 ] [ 0.448115, 0.050725, 0.05144, 0.44972 ] 0.8868036106802941 [ 0, 0, 0, 0 ]
choices: [ 85793, 14445, 14264, 85498 ] [ 0.428965, 0.072225, 0.07132, 0.42749 ] 0.8316296201321787 [ 0, 0, 0, 0 ]
choices: [ 75010, 25127, 24796, 75067 ] [ 0.37505, 0.125635, 0.12398, 0.375335 ] 0.6650179976003199 [ 0, 0, 0, 0 ]
choices: [ 64253, 35731, 35574, 64442 ] [ 0.321265, 0.178655, 0.17787, 0.32221 ] 0.4439014520722768 [ 0, 0, 0, 0 ]
choices: [ 50204, 50551, 49528, 49717 ] [ 0.25102, 0.252755, 0.24764, 0.248585 ] -0.006911799856585077 [ 0, 0, 0, 0 ]
*/


const choices = [0,0,0,0];
const choices_d = [0,0,0,0];

const axis1 = [1,0,0];

const axis2_0 = [Math.cos(0),Math.sin(0),0];
const axis2_22 = [Math.cos(Math.PI/8),Math.sin(Math.PI/8),0];
const axis2_30 = [Math.cos(Math.PI/6),Math.sin(Math.PI/6),0];
const axis2_45 = [Math.cos(Math.PI/4),Math.sin(Math.PI/4),0];

//const axis2_60 = [Math.cos(Math.PI*93/300),Math.sin(Math.PI*93/300),0];   // 111.6  50% 
const axis2_60 = [Math.cos(Math.PI/3),Math.sin(Math.PI/3),0];  // 44%

const axis2_90 = [Math.cos(Math.PI/2),Math.sin(Math.PI/2),0];  // 90 degrees separation;

let axis2 = axis2_45;

const tmp = [0,0,0];
const tmp2 = [0,0,0];

function pick(){
	let t = Math.random();
        //l += ( tmp[0] = Math.random()*2-1 ) * tmp[0];
        //l += ( tmp[1] = Math.random()*2-1 ) * tmp[1];
	tmp[0] = Math.cos( t * 2*Math.PI );
	tmp[1] = Math.sin( t * 2*Math.PI );
	tmp[2] = 0;
	//l += ( tmp[2] = Math.random()*2-1 ) *tmp[2];

        return tmp;
}


function getStateByChance( axis ) {    
	let s = 0;

	let dot= axis[0]*axis1[0] ;
	let chance = dot;// Math.sin( Math.PI/4 * (1+dot) );
	//chance = chance*chance;
	
	if( Math.random() < chance ) 
		s += 1;

	dot= axis[0]*axis2[0] + axis[1]*axis2[1]
	chance = dot;//Math.sin( Math.PI/4 * (1+dot) );
	//chance = chance*chance;
	if( Math.random() < chance ) 
		s += 2;
	return s;
}

function getState( axis ) {    
	let s = 0;

	if( axis[0]*axis1[0] >= 0 ) {
		//choices_d[0] += Math.sin( Math.PI/4*(1+axis[0]) );
		s += 1;
	}else{
		//choices_d[1] += Math.sin( Math.PI/4*(1+axis[0]) );
	}
	if( (axis[0]*axis2[0] + axis[1]*axis2[1]) >= 0 ) {
		//choices_d[2] += Math.sin( Math.PI/4*(1+(axis[0]*axis2[0]+axis[1]*axis2[1])) );
		s += 2;
	} else {
		//choices_d[3] += Math.sin( Math.PI/4*(1+(axis[0]*axis2[0]+axis[1]*axis2[1])) );
	}
        return s;
}

function test1() {
	let i;
	for( i = 0; i < 4; i++ ) { choices[i] = 0; choices_d[i] = 0; }

	for( i = 0; i < 200000; i++ ) {
        	const s = getState( pick() );
                choices[s]++;
        }

	

        console.log( "choices:", choices, choices.map( c=>(c/i)*Math.log2(c/i) ).reduce( ((acc,val)=>acc+=val),0 )+2, (choices[0]-choices[1])/i, 1-(choices[1]-choices[1]/2)/(choices[0]-choices[1]/2), choices_d );
}

function test2() {
	let i;
	for( let th = 0; th <= 90; th++ ) {
		const angle = th/180 * Math.PI;
		axis2[0] = Math.cos( angle );
		axis2[1] = Math.sin( angle );
		for( i = 0; i < 4; i++ ) { choices[i] = 0; choices_d[i] = 0; }

		for( i = 0; i < 200000; i++ ) {
        		const s = getState( pick() );
	                choices[s]++;
        	}
	        console.log( th,"choices:", 1-(choices[1])/(choices[0]), Math.cos( angle ), (1-(choices[1])/(choices[0])) );
	}
}

axis2 = tmp2;
test2();
[axis2_0, axis2_22, axis2_30, axis2_45,axis2_60,axis2_90].forEach( ax=>{ axis2 = ax; test1() } );
//test1();